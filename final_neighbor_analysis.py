# -*- coding: utf-8 -*-
"""Final_neighbor_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v7wBfms4VgCVi3zXC5DZWwFz6JfklyRm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors
from google.colab import files

def prompt_continue(message="Continue? [y/n]: "):
    while True:
        decision = input(message).strip().lower()
        if decision in ['y', 'n']:
            return decision == 'y'

# --- Upload CSV files only ---
uploaded = files.upload()  # Upload your two centroid CSVs

ctip2_path = "CTIP2_centroids_DAPIconstrained_3.csv"
satb2_path = "SATB2_centroids_DAPIconstrained_3.csv"

# --- Load CSVs ---
ctip2 = pd.read_csv(ctip2_path)
satb2 = pd.read_csv(satb2_path)

print(f"Loaded {len(ctip2)} CTIP2+ cells and {len(satb2)} SATB2+ cells.")
if not prompt_continue("Do these counts look correct? [y/n]: "):
    raise SystemExit("Check your CSVs and rerun.")

# --- Preview some data ---
print("CTIP2 head:\n", ctip2.head())
print("SATB2 head:\n", satb2.head())
if not prompt_continue("Is the data preview above correct? [y/n]: "):
    raise SystemExit("Check your CSVs and rerun.")

# --- Standardize coordinate columns ---
for df in [ctip2, satb2]:
    if "XM" in df.columns and "YM" in df.columns:
        df.rename(columns={"XM": "X", "YM": "Y"}, inplace=True)
    elif "X" not in df.columns or "Y" not in df.columns:
        raise ValueError("Your CSVs must have either 'XM' and 'YM', or 'X' and 'Y' columns!")

# --- Label phenotypes ---
ctip2['Phenotype'] = 'CTIP2+'
satb2['Phenotype'] = 'SATB2+'

# --- Combine ---
all_cells = pd.concat([ctip2, satb2], ignore_index=True)
all_cells[['X','Y','Phenotype']].to_csv("phenotyping_results.csv", index=False)
print("Merged all cells. Total:", len(all_cells))
if not prompt_continue("Proceed with merged dataframe? [y/n]: "):
    raise SystemExit("Aborted.")

# --- Quick centroid plot ---
plt.figure(figsize=(8,8))
plt.scatter(ctip2['X'], ctip2['Y'], s=5, c='red', label='CTIP2+')
plt.scatter(satb2['X'], satb2['Y'], s=5, c='blue', label='SATB2+')
plt.title('Cell Centroids')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.gca().invert_yaxis()
plt.show()
if not prompt_continue("Does the scatter plot look correct? [y/n]: "):
    raise SystemExit("Aborted due to centroid issue.")

# --- Map phenotype to integer ---
pheno_map = {'SATB2+': 1, 'CTIP2+': 2}
all_cells['PhenotypeID'] = all_cells['Phenotype'].map(pheno_map)
coords = all_cells[['X', 'Y']].values.astype(int)
labels = all_cells['PhenotypeID'].values

# --- Compute nearest neighbors (exclude self) ---
k_neighbors = 100
nbrs = NearestNeighbors(n_neighbors=k_neighbors+1, algorithm='ball_tree').fit(coords)
_, indices = nbrs.kneighbors(coords)
neighbor_indices = indices[:, 1:]  # drop self

same_type_counts = (labels[neighbor_indices] == labels[:, None]).sum(axis=1)
similarities_frac = same_type_counts / k_neighbors
similarities_pct = similarities_frac * 100.0

# --- Histogram of similarity percentages ---
plt.hist(similarities_pct, bins=30)
plt.xlabel("Similarity (%) among 100 NNs")
plt.ylabel("Cell count")
plt.title(f"Mean Similarity: {similarities_pct.mean():.2f}%")
plt.show()
if not prompt_continue("Does the similarity histogram look reasonable? [y/n]: "):
    raise SystemExit("Aborted due to unexpected similarity distribution.")

# --- Save data ---
all_cells['Similarity'] = similarities_frac
all_cells['SimilarityPct'] = similarities_pct
all_cells[['X', 'Y', 'Phenotype', 'Similarity', 'SimilarityPct']].to_csv(
    "cell_similarity_scores.csv", index=False
)
np.savetxt("similarity_values_only.csv", similarities_pct, delimiter=",")
files.download("similarity_values_only.csv")

# --- Scatter heatmap without background image ---
p1, p99 = np.percentile(all_cells['SimilarityPct'], [1, 99])
plt.figure(figsize=(10,10))
sc = plt.scatter(
    all_cells['X'], all_cells['Y'],
    c=all_cells['SimilarityPct'],
    cmap='jet', s=8, vmin=p1, vmax=p99
)
plt.gca().invert_yaxis()
cb = plt.colorbar(sc)
cb.set_label("Similarity (%)")
plt.axis('equal')
plt.axis('off')
plt.title("Similarity Scatter Heatmap (No Background)")
plt.tight_layout()

plt.savefig("similarity_scatter_heatmap.png", dpi=300, bbox_inches='tight')
if not prompt_continue("Does the scatter heatmap look correct? [y/n]: "):
    raise SystemExit("Aborted due to scatter heatmap issue.")
files.download("similarity_scatter_heatmap.png")
plt.show()